"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  __   __   __     __    __     ______   ______     ______     ______
" /\ \ / /  /\ \   /\ "-./  \   /\  ___\ /\  __ \   /\  ___\   /\__  _\
" \ \ \"/   \ \ \  \ \ \-./\ \  \ \  __\ \ \  __ \  \ \___  \  \/_/\ \/
"  \ \__|    \ \_\  \ \_\ \ \_\  \ \_\    \ \_\ \_\  \/\_____\    \ \_\
"   \/_/      \/_/   \/_/  \/_/   \/_/     \/_/\/_/   \/_____/     \/_/
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" chenxuan的个人Vim配置(无插件版本)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 通用设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","      " 定义<leader>键
set nocompatible         " 设置不兼容原始vi模式
filetype on              " 设置开启文件类型侦测
filetype plugin on       " 设置加载对应文件类型的插件
set noeb                 " 关闭错误的提示
syntax enable            " 开启语法高亮功能
syntax on                " 自动语法高亮
set t_Co=256             " 开启256色支持
set vb t_vb=             " 设置不要响铃
set cmdheight=1          " 设置命令行的高度
set showcmd              " select模式下显示选中的行数
set textwidth=0          " 设置禁止自动断行
set ruler                " 总是显示光标位置
set laststatus=2         " 总是显示状态栏
set number               " 开启行号显示
set relativenumber       " 展示相对行号
set cursorline           " 高亮显示当前行
set whichwrap+=<,>,h,l   " 设置光标键跨行
set ttimeoutlen=0        " 设置<ESC>键响应时间
set virtualedit=block,onemore   " 允许光标出现在最后一个字符的后面
set noshowmode           " 设置不打开底部insert
set hidden               " 设置允许在未保存切换buffer
set background=dark      " 设置背景默认黑色

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码缩进和排版
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent           " 设置自动缩进
set cindent              " 设置使用C/C++语言的自动缩进方式
set cinoptions=g0,:0,N-s,(0    " 设置C/C++语言的具体缩进方式
set smartindent          " 智能的选择对其方式
filetype indent on       " 自适应不同语言的智能缩进
set noexpandtab          " 设置禁止空格替换tab,tab党
set tabstop=4            " 设置编辑时制表符占用空格数
set shiftwidth=4         " 设置格式化时制表符占用空格数
set softtabstop=4        " 设置4个空格为制表符
set smarttab             " 在行和段开始处使用制表符
set nowrap               " 禁止折行
set backspace=2          " 使用回车键正常处理indent,eol,start等
set sidescroll=10        " 设置向右滚动字符数
set nofoldenable         " 禁用折叠代码
set list lcs=tab:¦\      " 设置默认开启对齐线
set sidescroll=0         " 设置向右滑动距离
set sidescrolloff=4      " 设置右部距离
" set scrolloff=5          " 设置底部距离

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码补全
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmenu                             " vim自身命名行模式智能补全
set completeopt=menuone,preview,noselect " 补全时不显示窗口，只显示补全列表
set omnifunc=syntaxcomplete#Complete     " 设置全能补全
set shortmess+=c                         " 设置补全静默

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 搜索设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch            " 高亮显示搜索结果
set incsearch           " 开启实时搜索功能
set ignorecase          " 搜索时大小写不敏感
set smartcase           " 搜索智能匹配大小写

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 缓存设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup            " 设置不备份
set noswapfile          " 禁止生成临时文件
set autoread            " 文件在vim之外修改过，自动重新读入
set autowrite           " 设置自动保存
set confirm             " 在处理未保存或只读文件的时候，弹出确认

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 编码设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set langmenu=zh_CN.UTF-8
set helplang=cn
set termencoding=utf-8
set encoding=utf8
set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gvim/macvim设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("gui_running")
	set guifont=DroidSansMono\ Nerd\ Font\ Regular\ 14      " 设置字体
	set guioptions-=m           " 隐藏菜单栏
	set guioptions-=T           " 隐藏工具栏
	set guioptions-=L           " 隐藏左侧滚动条
	set guioptions-=r           " 隐藏右侧滚动条
	set guioptions-=b           " 隐藏底部滚动条
	set showtabline=0           " 隐藏Tab栏
	set guicursor=n-v-c:ver5    " 设置光标为竖线
	" set guifont=Droid\ Sans\ Mono\ Nerd\ Font\ Complete:h14 " set fonts in macvim
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-buffer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent><c-p> :bp<cr>
nnoremap <silent><c-n> :bn<cr>
nnoremap <silent><leader>d :bd<cr>
nnoremap <silent><expr><c-m> expand('%')==''?"\<cr>":":w<cr>"

" reload .vimrc
nnoremap <leader><leader>s :source $MYVIMRC<cr>
nnoremap <leader><leader>S :source <c-r>=expand('%:p')<cr><cr>

" update self
command! UpdateSelf call system('curl https://gitee.com/mirrorvim/vim-fast/raw/master/shell/websimple.sh | bash')|qa

" 插入模式下的光标移动
imap <c-j> <down>
imap <c-k> <up>
imap <c-l> <right>
imap <c-h> <left>

" 插入移动
inoremap <c-e> <end>
inoremap <c-a> <c-[>^i
inoremap <c-y> <c-[>lWi
inoremap <c-t> <c-[>Bi
inoremap <c-q> <del>

" 插入模式删除
inoremap <c-d> <c-[>ddi
snoremap <c-d> <c-[>ddi

" 定位装置
nnoremap { /{<cr>:noh<cr>va{<c-g>
vnoremap { <c-[>/{<cr>:noh<cr>va{<c-g>
nnoremap } /{<cr>:noh<cr>NNva}<c-g>
vnoremap } <c-[>/{<cr>:noh<cr>NNva}<c-g>
inoremap <c-f> <c-[>/{<cr>:noh<cr>va{<c-g>
vnoremap <c-f> <c-[>/{<cr>:noh<cr>va{<c-g>
vnoremap <c-b> <c-[>/{<cr>:noh<cr>NNva}<c-g>
inoremap <expr><c-b> <sid>CtrlB()
func s:CtrlB()
	if pumvisible()
		return "\<c-n>"
	elseif getline('.')[col('.')-2]==nr2char(9)
		let s:pos=col('.')
		let s:result=""
		while s:pos!=0
			let s:result=s:result."\<bs>"
			let s:pos-=1
		endwhile
		return s:result
	else
		return "\<c-[>/}\<cr>:noh\<cr>NNva}\<c-g>"
	endif
endfunc

" 复制当前选中到系统剪切板
vnoremap <leader><leader>y "+y
"将系统剪切板内容粘贴到vim
nnoremap <leader><leader>p "+p
nnoremap <leader><leader>P "+P
vnoremap <leader><leader>p "+p
vnoremap <leader><leader>P "+P

" 打开文件自动定位到最后编辑的位置
let g:map_recent_close={}
augroup ReadPost
	au!
	autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g'\"" | execute "normal! zz" | endif
	autocmd BufDelete * if expand('%:p')!=''|let g:map_recent_close[expand('%:p')] =
				\{'lnum':line('.'),'col':col('.'),'text':'close at '.strftime("%H:%M"),'time':localtime()}
				\|endif
augroup END
func! s:GetRecentClose()
	let s:list=[]
	for [key,value] in items(g:map_recent_close)
		let value['filename']=key
		call insert(s:list,value)
	endfor
	let s:func={m1,m2 -> m1['time']>m2['time']?-1:1}
	call sort(s:list,s:func)
	call setqflist(s:list,'r')
	copen
endfunc
nnoremap <silent><nowait><space>q :call <sid>GetRecentClose()<cr>

" termdebug
nnoremap <leader><leader>d :set mouse=a<cr>:packadd termdebug<cr>:Termdebug<space>
nnoremap <F5> :set mouse=a<cr>:packadd termdebug<cr>:Termdebug<space>
let g:termdebug_wide=1
nnoremap <F6> :Break<cr>
nnoremap <F7> :Over<cr>
nnoremap <F8> :Step<cr>

" term console
func! Tapi_EditFile(bufnum,arglist)
	execute ":wincmd p"
	if filereadable(a:arglist[0])
		execute ":edit " . a:arglist[0]
	endif
	if len(a:arglist)>1
		call term_sendkeys(a:bufnum,a:arglist[1]."\<cr>")
	endif
endfunc
tnoremap <c-\> <c-\><c-n>
tnoremap <c-o> printf '\033]51;["call","Tapi_EditFile",["%s/%s"]]\007' $PWD<space>
tnoremap <c-]> printf '\033]51;["call","Tapi_EditFile",["%s/%s","exit"]]\007' $PWD<space>
tnoremap <c-z> exit<cr>
nnoremap <leader><leader>T :bo term ++rows=6<CR>
nnoremap <leader><leader>t :vert term<CR>
nnoremap <silent><space><space>t :tabe<cr>:execute ":vert term ++curwin ++close " <cr>
nnoremap <silent><space><space>T :let @s=expand('%:p:h')<cr>:tabe<cr>:call term_start("bash",{"cwd":"<c-r>=@s<cr>","curwin":1,"term_finish":"close"})<cr>

" term console
nnoremap <leader><leader>T :bo term ++rows=6<CR>
nnoremap <leader><leader>t :vert term<CR>
nnoremap <silent><space><space>t :tabe<cr>:vert term ++curwin ++close<cr>

" term task
let g:Term_task_run="lazygit"
nnoremap <silent><space>g :tabe<cr>:execute ":vert term ++curwin ++close " . g:Term_task_run<CR>

" set pair baket
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>

" jump
func! s:Judge(ch)
	if a:ch=='"'||a:ch=="'"||a:ch=='`'
		if getline('.')[col('.')-1]!=a:ch
			return a:ch.a:ch."\<left>"
		endif
	endif
	if getline('.')[col('.')-1]==a:ch
		return "\<right>"
	endif
	return a:ch
endfunc
inoremap <expr><silent>" <sid>Judge('"')
inoremap <expr><silent>` <sid>Judge('`')
inoremap <expr><silent>' <sid>Judge("'")
inoremap <expr><silent>> <sid>Judge('>')
inoremap <expr><silent>) <sid>Judge(')')
inoremap <expr><silent>} <sid>Judge('}')
inoremap <expr><silent>] <sid>Judge(']')

" set backspace
inoremap <expr><bs> <sid>Backspace()
func! s:Backspace()
	let s:pair=getline('.')[col('.')-1]
	let s:pair_l=getline('.')[col('.')-2]
	if (s:pair==')'&&s:pair_l=='(')||
				\ (s:pair==']'&&s:pair_l=='[')||
				\ (s:pair=='}'&&s:pair_l=='{')||
				\ (s:pair=='"'&&s:pair_l=='"')||
				\ (s:pair=="'"&&s:pair_l=="'")||
				\ (s:pair=='`'&&s:pair_l=='`')||
				\ (s:pair=='~'&&s:pair_l=='~')||
				\ (s:pair=='*'&&s:pair_l=='*')
		return "\<right>\<bs>\<bs>"
	else
		return "\<bs>"
	endif
endfunc

" yank and paste
nnoremap <leader>p "0p
vnoremap <leader>p "0p
nnoremap <leader>P "0P
vnoremap <leader>P "0P

" vimdiff merge
command! -nargs=0 Remote :diffg RE
command! -nargs=0 Base :diffg BA
command! -nargs=0 Local :diffg LO

" change window width
nnoremap <c-up> <c-w>+
nnoremap <c-down> <c-w>-
nnoremap <c-left> <c-w><
nnoremap <c-right> <c-w>>

" change window in normal
nnoremap <c-k> <c-w>k
nnoremap <c-j> <c-w>j
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <s-up>    <c-w>k
nnoremap <s-down>  <c-w>j
nnoremap <s-left>  <c-w>h
nnoremap <s-right> <c-w>l

" change window location
nnoremap <c-s-up> <c-w>K
nnoremap <c-s-down> <c-w>J
nnoremap <c-s-left> <c-w>H
nnoremap <c-s-right> <c-w>L

" quick fix
nnoremap [q :cnext<cr>
nnoremap ]q :cprevious<cr>
nnoremap \q :cclose<cr>
nnoremap =q :copen<cr>

" set mouse
func MouseConfig()
	set mouse=a
	set mousemodel=popup_setpos
	" you can define menu self
	" visual model
	vnoremenu PopUp.Yank\ Text "+y
	vnoremenu PopUp.Cut\ Text "+d
	vnoremenu PopUp.Del\ Text "_d
	vnoremenu PopUp.Paste\ Text "+p
	" normal model
	nnoremenu PopUp.Paste\ Text "+p
	nnoremenu PopUp.Select\ All ggVG
	nnoremenu PopUp.Back\ Pos <c-o>zz
	nnoremenu PopUp.Next\ Pos <c-i>zz
	" fold
	nnoremenu PopUp.Open\ Fold  zO
	nnoremenu PopUp.Close\ Fold zC
	" close
	nnoremenu PopUp.-Sep- :<cr>
	nnoremenu PopUp.Close\ Mouse :set mouse=""<cr>
endfunc
call MouseConfig() " default set mouse enable
nnoremap <silent><nowait>=m :call MouseConfig()<cr>
nnoremap <silent><nowait>\m :set mouse=""<cr>

" show indent line
nnoremap <silent><nowait>=i :set list lcs=tab:¦\<space> <cr>
nnoremap <silent><nowait>\i :set nolist<cr>

" set spell
nnoremap <silent><nowait>=s :setlocal spell<cr>
nnoremap <silent><nowait>\s :setlocal nospell<cr>
" z= is list of change

" set wrap
nnoremap <silent><nowait>=r :setlocal wrap<cr>:nnoremap<buffer> j gj<cr>:nnoremap<buffer> k gk<cr>
nnoremap <silent><nowait>\r :setlocal nowrap<cr>:nunmap<buffer> j<cr>:nunmap<buffer> k<cr>

" set line number
nnoremap <silent><nowait>=n :setlocal norelativenumber<cr>
nnoremap <silent><nowait>\n :setlocal relativenumber<cr>

" set fold auto
nnoremap <silent><nowait>=z :setlocal fdm=indent<cr>:setlocal fen<cr>
nnoremap <silent><nowait>\z :setlocal fdm=manual<cr>:setlocal nofen<cr>
nnoremap <silent><nowait>=o zO
nnoremap <silent><nowait>\o zC
nnoremap <silent><nowait><expr><bs> foldlevel('.')>0?"zc":"\<bs>"

" set search noh
nnoremap <silent><nowait>\h :noh<cr>

" delete <space> in end of line
nnoremap <silent><nowait>d<space> :%s/ *$//g<cr>:noh<cr><c-o>

" run macro in visual model
xnoremap @ :normal @

" use select area to replace
xnoremap s :<c-u>execute "normal! gv\"sy"<cr>:%s/\V<c-r>=@s<cr>/

" indent buffer
nnoremap <silent><nowait> =e gg=G<c-o><c-o>zz
onoremap <silent>ie :<c-u>normal! ggVG<cr>
xnoremap <silent>ie :<c-u>normal! ggVG<cr>
onoremap <silent>ae :<c-u>normal! ggVG<cr>
xnoremap <silent>ae :<c-u>normal! ggVG<cr>

" object line
onoremap <silent>il :<c-u>normal! ^v$BE<cr>
xnoremap <silent>il :<c-u>normal! ^v$<cr><left>
onoremap <silent>al :<c-u>normal! 0v$<cr>
xnoremap <silent>al :<c-u>normal! 0v$<cr>

" object argc
onoremap <silent>aa :<c-u>call <sid>GetArgc('T','f')<cr>
onoremap <silent>ia :<c-u>call <sid>GetArgc('T','t')<cr>
xnoremap <silent>aa :<c-u>call <sid>GetArgc('T','f')<cr>
xnoremap <silent>ia :<c-u>call <sid>GetArgc('T','t')<cr>
func! s:GetArgc(one,two)
	let s:pos=col('.')|let s:begin=''|let s:end=''|let s:i=s:pos-1|let s:one=a:one|let s:two=a:two
	while s:i>0
		if getline('.')[s:i]=='('||getline('.')[s:i]==','
			let s:begin=getline('.')[s:i]
			break
		endif
		let s:i-=1
	endwhile
	let s:i=s:pos
	while s:i<col('$')
		if getline('.')[s:i]==')'||getline('.')[s:i]==','
			let s:end=getline('.')[s:i]
			if s:begin==','&&s:two=='f'&&s:end!=','
				let s:one='F'
			endif
			if s:end==')'
				let s:two='t'
			endif
			break
		endif
		let s:i+=1
	endwhile
	if s:begin!=''&&s:end!=''
		execute "normal! ".s:one.s:begin."v".s:two.s:end
	endif
endfunc

" easy to get obj
onoremap <silent>i, i<
onoremap <silent>a, a<
xnoremap <silent>i, i<
xnoremap <silent>a, a<
onoremap <silent>i; i"
onoremap <silent>a; a"
xnoremap <silent>i; i"
xnoremap <silent>a; a"
onoremap <silent>in i{
onoremap <silent>an a{
xnoremap <silent>in i{
xnoremap <silent>an a{

" sudo to write file
cnoremap w!! w !sudo tee % >/dev/null

" quick to change dir
cnoremap cdn cd <c-r>=expand('%:p:h')<cr>
cnoremap cdr cd <c-r>=<sid>FindRoot()<cr>
func! s:FindRoot()
	let s:gitdir=getcwd()."/"
	while strridx(s:gitdir,"/")!=-1
		let s:gitdir=strpart(s:gitdir,0,strridx(s:gitdir,"/"))
		if isdirectory(s:gitdir . "/.git")
			break
		endif
	endwhile
	if strridx(s:gitdir,"/")==-1
		return ""
	endif
	return s:gitdir
endfunc

" cmd emacs model
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <c-d> <del>
cnoremap <c-h> <left>
cnoremap <c-l> <right>
cnoremap <c-t> <s-left>
cnoremap <c-y> <s-right>

" set cursor middle
nnoremap <c-o> <c-o>zz
nnoremap <c-i> <c-i>zz

" set split window
nnoremap <silent><nowait>_ :vsp<cr>:bn<cr>
nnoremap <silent><nowait>+ :sp<cr>:bn<cr>

" edit file
nnoremap e         :edit<space><c-r>=getcwd()<cr>/
nnoremap E         :edit<space><c-r>=expand('%:p:h')<cr>/
nnoremap <leader>e :edit<space>~/

" open : quick
nnoremap <space>; :

" change } pos
nnoremap L $i<c-m><esc>k$

" add empty line
nnoremap H O<c-[>j
nnoremap M o<c-[>k

" make move easy
nnoremap <silent><c-e> $
nnoremap <silent>Q $
nnoremap <silent><expr><c-a> getline('.')[col('.')-1]>='0'&&getline('.')[col('.')-1]<='9'?"\<c-a>":"^"
nnoremap <silent>S ^

" enhance c-a
nnoremap <silent><expr>g<c-a> getline('.')[col('.')-1]=='9'?"r0":"r".(getline('.')[col('.')-1]+1)
nnoremap <silent><expr>g<c-x> getline('.')[col('.')-1]=='0'?"r9":"r".(getline('.')[col('.')-1]-1)

" add space
nnoremap <leader><space> i<space><right><c-[>

" scroll in other window
nnoremap \u <c-w>p<c-u><c-w>p
nnoremap \d <c-w>p<c-d><c-w>p

" redraw the screen
nnoremap <silent>\\l :redr!<cr>

" ctrl file system
command! Delete if filereadable(expand('%'))|call delete(expand('%'))|execute ":bd"|execute ":bn"|endif
command! -nargs=1 -bang -complete=file Rename let @s=expand('%')|f <args>|w<bang>|call delete(@s)
cab Rename Rename <c-r>=expand('%:p:h')<cr>/
command! -nargs=1 -bang -complete=file Mkdir echo mkdir(<f-args>)
cab Mkdir Mkdir <c-r>=expand('%:p:h')<cr>/
command! -nargs=1 -bang -complete=file Rmdir echo delete(<f-args>,"d")
cab Rmdir Rmdir <c-r>=expand('%:p:h')<cr>/
" use cd to change dir

" select move
xnoremap <silent><up>    :move '<-2<cr>gv
xnoremap <silent><down>  :move '>+1<cr>gv
xnoremap <silent><right> y<c-w>lo<c-[>Vpgv
xnoremap <silent><left>  y<c-w>ho<c-[>Vpgv
xnoremap <silent><c-j>   :move '>+1<cr>gv
xnoremap <silent><c-k>   :move '<-2<cr>gv
xnoremap <silent><c-l>   y<c-w>lo<c-[>Vpgv
xnoremap <silent><c-h>   y<c-w>ho<c-[>Vpgv

" open link
" is default in vim by gx
func! s:GotoLink()
	let s:list=matchstrpos(getline('.'),'https*://\S[^][(){}]*',0)
	let s:link=s:list[0]
	while s:list[0]!=''&&(s:list[1]>col('.')||s:list[2]<col('.'))
		let s:list=matchstrpos(getline('.'),'https*://\S[^][(){}]*',s:list[2])
	endwhile
	if s:list[0]!=''
		let s:link=s:list[0]
	endif
	let s:browser=get(g:,'default_browser','firefox')
	if s:link!=''
		call job_start(s:browser.' '.s:link)
	else
		echo 'cannot find link'
	endif
endfunc
nnoremap <silent><nowait>gl :call <sid>GotoLink()<cr>

" set alias
iab ;e 1607772321@qq.com
iab ;n chenxuan
nnoremap \a :iabc<cr>
nnoremap =a :ab<cr>

" config complete
inoremap / /<c-x><c-f>
let b:cmpX=-1
let b:cmpY=-1
function! s:feed_popup()
	if getline('.')[col('.')-1]=='/'
		return
	endif
	let x = col('.') - 1
	let y = line('.') - 1
	if b:cmpX==x&&b:cmpY==y
		return
	endif
	let s:min_complete=2
	let s:context=strpart(getline('.'), 0, col('.') - 1)
	let s:match= matchlist(s:context, '\(\k\{' . s:min_complete . ',}\)$')
	if empty(s:match)
		return
	endif
	silent! call feedkeys("\<c-n>", 'n')
	let b:cmpX=x
	let b:cmpY=y
	return
endfunction
augroup Complete
	au!
	au CursorMovedI <buffer> nested call s:feed_popup()
augroup END
inoremap <silent><expr><TAB>
			\ pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"


" set colorscheme
set termguicolors
if filereadable(expand('~/.vim/colors/tokyonight.vim'))
	colorscheme tokyonight
else
	colorscheme desert
	call job_start('curl https://gitee.com/mirrorvim/vim-fast/raw/master/shell/websimple.sh | bash')
endif

" set statusline
function GetMode()
	let m = mode()
	let s:str=''
	let s:color='#9ECE6A'
	if m == 'R'
		let s:color='#F7768E'
		let s:str= 'Replace'
	elseif m == 'v'
		let s:color='#F7768E'
		let s:str= 'Visual'
	elseif m == 'i'
		let s:color='#7AA2F7'
		let s:str= 'Insert'
	elseif m == 't'
		let s:color='#7AA2F7'
		let s:str= 'Terminal'
	else
		let s:color='#9ECE6A'
		let s:str= 'Normal'
	endif
	exec 'highlight User3 font=#000000 guifg=#1a1b26 guibg='.s:color
	exec 'highlight User4 font=#000000 guifg='.s:color.' guibg=#232433'
	redraw
	return s:str
endfunction

set statusline=%3*\ %{GetMode()}
set statusline+=%4*\ %F\ %m%r%h%w%=
set statusline+=%3*\ %Y\ |
set statusline+=%3*¦%{\"\".(\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\"+\":\"\").\"\"}¦
set statusline+=%3*☰\ %l/%-L%3p%%\ ¦:%v\ ¦
highlight User1 font=#000000 guifg=#1a1b26 guibg=#9ECE6A
highlight User2 font=#000000 guifg=#9ECE6A guibg=#232433
highlight User3 font=#000000 guifg=#1a1b26 guibg=#9ECE6A
highlight User4 font=#000000 guifg=#9ECE6A guibg=#232433

" set netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 15
set fillchars=vert:\⎜
nnoremap <leader>n :Lexplore<cr> " set netrw
highlight VertSplit guibg=#333333 guifg=#666666

" set tabline
func! TabLine()
	let s:result=''
	for buf in getbufinfo({'buflisted':1})
		let s:name=buf.name
		if strridx(buf.name,"/")!=-1
			let s:name=strpart(buf.name,strridx(buf.name,"/")+1)
		endif
		if buf.name!=expand('%:p')
			let s:result=s:result.' '.s:name
		endif
	endfor
	redrawt
	return s:result
endfunc
func! Redraw()
	redrawt
	return 'buffer'
endfunc
set showtabline=2
set tabline=%2*\ %{TabLine()}
set tabline+=%1*\ %t
set tabline+=%2*%m%r%h%w%=%1*\ buffer

" set gcc enable
func! s:Commentary()
	let s:num=line('.')
	let line=getline(s:num)
	let uncomment=2
	let [l, r] = split( substitute(substitute(substitute(
				\ &commentstring, '^$', '%s', ''), '\S\zs%s',' %s', '') ,'%s\ze\S', '%s ', ''), '%s', 1)
	let line = matchstr(getline(s:num),'\S.*\s\@<!')
	if l[-1:] ==# ' ' && stridx(line,l) == -1 && stridx(line,l[0:-2]) == 0
		let l = l[:-2]
	endif
	if r[0] ==# ' ' && line[-strlen(r):] != r && line[1-strlen(r):] == r[1:]
		let r = r[1:]
	endif
	if len(line) && (stridx(line,l) || line[strlen(line)-strlen(r) : -1] != r)
		let uncomment = 0
	endif
	let line=getline(s:num)
	let [l, r] = split( substitute(substitute(substitute(
				\ &commentstring, '^$', '%s', ''), '\S\zs%s',' %s', '') ,'%s\ze\S', '%s ', ''), '%s', 1)
	if strlen(r) > 2 && l.r !~# '\\'
		let line = substitute(line,
					\'\M' . substitute(l, '\ze\S\s*$', '\\zs\\d\\*\\ze', '') . '\|' . substitute(r, '\S\zs', '\\zs\\d\\*\\ze', ''),
					\'\=substitute(submatch(0)+1-uncomment,"^0$\\|^-\\d*$","","")','g')
	endif
	if uncomment
		let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
	else
		let line = substitute(line,'^\%('.matchstr(getline(s:num),'^\s*').'\|\s*\)\zs.*\S\@<=','\=l.submatch(0).r','')
	endif
	call setline(s:num,line)
endfunc
nnoremap <silent><nowait>gcc :call <sid>Commentary()<cr>

" vim sourround
let g:pair_map={
			\'(':')',
			\'[':']',
			\'{':'}',
			\'"':'"',
			\"'":"'",
			\'<':'>',
			\'`':'`',
			\}
func! s:AddSourround()
	let s:ch=nr2char(getchar())
	let s:col=col('.')
	norm! gv"sy
	let s:str = @s
	for k in keys(g:pair_map)
		if s:ch==k||s:ch==g:pair_map[k]
			execute ":s/^\\(.\\{".(col('.')-1)."\\}\\)".s:str."/\\1".k.s:str.g:pair_map[k]."/"
			execute "normal! ".(s:col+1)."l"
			return
		endif
	endfor
	echo s:ch.' unknow pair'
endfunc
func! s:DelSourround()
	let s:ch=nr2char(getchar())
	if getline('.')[col('.')-1]!=s:ch
		echo 'not begin with'.s:ch
	endif
	for k in keys(g:pair_map)
		if s:ch==k
			execute 'normal! xf'.g:pair_map[k].'x'
			return
		endif
	endfor
	echo s:ch.' unknow pair'
endfunc
func! s:ChangeSourround()
	let s:ch=nr2char(getchar())
	let s:two=nr2char(getchar())
	if getline('.')[col('.')-1]!=s:ch
		echo 'not begin with'.s:ch
	endif
	execute 'normal! r'.s:two.'f'.g:pair_map[s:ch].'r'.g:pair_map[s:two]
	echo s:ch.' unknow pair'
endfunc

xnoremap <silent>S :<c-u>call <sid>AddSourround()<cr>
nnoremap <silent>ds :call <sid>DelSourround()<cr>
nnoremap <silent>cs :call <sid>ChangeSourround()<cr>
